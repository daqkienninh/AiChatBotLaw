// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.DBContext;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(AichatbotDbContext))]
    [Migration("20250609033802_AddPasswordToRegisteredUser")]
    partial class AddPasswordToRegisteredUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repositories.Models.Answer", b =>
                {
                    b.Property<string>("AnswerId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("answer_id");

                    b.Property<string>("AnsContent")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ans_content");

                    b.Property<DateTime?>("AnsCreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ans_create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LegalclauseId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("legalclause_id");

                    b.Property<string>("QuestionId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("question_id");

                    b.HasKey("AnswerId")
                        .HasName("PK__Answer__33724318783AAB78");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Question", b =>
                {
                    b.Property<string>("QuestionId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("QuesCreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ques_create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("question_content");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("user_id");

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__2EC21549E2006468");

                    b.HasIndex("UserId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.RegisteredUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_email");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_name");

                    b.Property<string>("UserStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_status");

                    b.HasKey("UserId")
                        .HasName("PK__Register__B9BE370F009903D9");

                    b.HasIndex(new[] { "UserEmail" }, "UQ__Register__B0FBA2122283A44E")
                        .IsUnique();

                    b.ToTable("Registered_user", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Answer", b =>
                {
                    b.HasOne("Repositories.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK__Answer__question__52593CB8");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Repositories.Models.Question", b =>
                {
                    b.HasOne("Repositories.Models.RegisteredUser", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Question__user_i__4E88ABD4");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repositories.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Repositories.Models.RegisteredUser", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
